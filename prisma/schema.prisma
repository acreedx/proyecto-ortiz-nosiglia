generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id             Int       @id @default(autoincrement())
  balance        Int
  billing_status String    @db.VarChar(50)
  calculated_at  DateTime? @db.Timestamptz(6)
  status         String    @db.Char(1)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  invoice        Invoice[]
  patient        Patient?

  @@map("account")
}

model Appointment {
  id                      Int       @id @default(autoincrement())
  scheduled_on            DateTime  @db.Timestamptz(6)
  programed_date_time     DateTime  @db.Timestamptz(6)
  programed_end_date_time DateTime  @db.Timestamptz(6)
  specialty               String    @db.VarChar(50)
  reason                  String    @db.VarChar(100)
  note                    String?   @db.VarChar(200)
  patient_instruction     String?   @db.VarChar(200)
  cancellation_date       DateTime? @db.Timestamptz(6)
  cancellation_reason     String?   @db.VarChar(200)
  is_cancelled            Boolean?
  status                  String    @db.Char(1)
  patient_id              Int
  doctor_id               Int
  created_at              DateTime? @default(now()) @db.Timestamptz(6)
  updated_at              DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  doctor                  Doctor    @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient                 Patient   @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("appointment")
}

model AuditEvents {
  id                 Int       @id @default(autoincrement())
  type               String    @db.VarChar(100)
  action             String    @db.VarChar(100)
  severity           String    @db.VarChar(50)
  outcome            String?   @db.VarChar(100)
  module             String    @db.VarChar(100)
  detail             String
  requestor          Boolean
  occurred_date_time DateTime  @db.Timestamptz(6)
  network            String    @db.VarChar(100)
  person_name        String    @db.VarChar(100)
  person_role        String    @db.VarChar(100)
  staff_id           Int?
  patient_id         Int?
  created_at         DateTime? @default(now()) @db.Timestamptz(6)
  patient            Patient?  @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  staff              Staff?    @relation(fields: [staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("audit_events")
}

model CarePlan {
  id                        Int       @id @default(autoincrement())
  treatment_type            String    @db.VarChar(50)
  title                     String    @db.VarChar(100)
  description               String    @db.VarChar(200)
  start_date                DateTime  @db.Date
  end_date                  DateTime? @db.Date
  estimated_appointments    Int
  days_between_appointments Int
  total_appointments        Int?
  cost                      Int
  status                    String    @db.Char(1)
  patient_id                Int
  created_at                DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  patient                   Patient   @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("care_plan")
}

model Doctor {
  id             Int             @id @default(autoincrement())
  staff_id       Int             @unique
  specialization String          @db.VarChar(50)
  created_at     DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?       @default(now()) @updatedAt @db.Timestamptz(6)
  appointment    Appointment[]
  staff          Staff           @relation(fields: [staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  encounter      Encounter[]
  qualification  Qualification[]

  @@map("doctor")
}

model EmergencyContact {
  id           Int       @id @default(autoincrement())
  relation     String    @db.VarChar(50)
  name         String    @db.VarChar(50)
  phone        String    @db.VarChar(50)
  mobile       String    @db.VarChar(50)
  address_line String    @db.VarChar(100)
  address_city String    @db.VarChar(100)
  status       String    @db.Char(1)
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  patient      Patient?

  @@map("emergency_contact")
}

model Encounter {
  id                  Int       @id @default(autoincrement())
  type                String    @db.VarChar(50)
  performed_on        DateTime  @db.Timestamptz(6)
  specialty           String    @db.VarChar(50)
  reason              String    @db.VarChar(100)
  note                String?   @db.VarChar(200)
  patient_instruction String?   @db.VarChar(200)
  diagnosis           String    @db.VarChar(200)
  status              String    @db.Char(1)
  patient_id          Int
  doctor_id           Int
  created_at          DateTime? @default(now()) @db.Timestamptz(6)
  updated_at          DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  doctor              Doctor    @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient             Patient   @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("encounter")
}

model ImagingStudy {
  id          Int       @id @default(autoincrement())
  description String    @db.VarChar(100)
  cost        Int?
  status      String    @db.Char(1)
  patient_id  Int
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  files       Files[]
  patient     Patient   @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("imaging_study")
}

model Odontogram {
  id             Int             @id @default(autoincrement())
  tratamiento    String?         @db.VarChar(200)
  status         String          @db.Char(1)
  patient_id     Int             @unique
  created_at     DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?       @default(now()) @updatedAt @db.Timestamptz(6)
  patient        Patient         @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  odontogram_row OdontogramRow[]

  @@map("odontogram")
}

model OdontogramRow {
  id            Int        @id @default(autoincrement())
  msc           String     @db.VarChar(100)
  temp          String?    @db.VarChar(100)
  pieza         String?    @db.VarChar(100)
  fecha         DateTime?  @db.Timestamptz(6)
  diagnostico   String?    @db.VarChar(200)
  tratamiento   String?    @db.VarChar(200)
  status        String     @db.Char(1)
  odontogram_id Int
  created_at    DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?  @default(now()) @updatedAt @db.Timestamptz(6)
  odontogram    Odontogram @relation(fields: [odontogram_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("odontogram_row")
}

model Organization {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(100)
  address    String    @db.VarChar(200)
  status     String    @db.Char(1)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  patient    Patient[]

  @@map("organization")
}

model Patient {
  id                   Int               @id @default(autoincrement())
  allergies            String?           @db.VarChar(200)
  preconditions        String?           @db.VarChar(200)
  status               String            @db.Char(1)
  organization_id      Int?
  account_id           Int               @unique
  user_id              Int               @unique
  emergency_contact_id Int?              @unique
  created_at           DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?         @default(now()) @updatedAt @db.Timestamptz(6)
  appointment          Appointment[]
  audit_events         AuditEvents[]
  care_plan            CarePlan[]
  encounter            Encounter[]
  imaging_study        ImagingStudy[]
  odontogram           Odontogram?
  account              Account           @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  emergency_contact    EmergencyContact? @relation(fields: [emergency_contact_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organization         Organization?     @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                 User              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("patient")
}

model Payroll {
  id         Int       @id @default(autoincrement())
  salary     Int?
  bonus      Int?
  staff_id   Int       @unique
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  staff      Staff     @relation(fields: [staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("payroll")
}

model Permission {
  id               Int               @id @default(autoincrement())
  code             String            @db.VarChar(20)
  permission_name  String            @db.VarChar(50)
  status           String            @db.Char(1)
  created_at       DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?         @default(now()) @updatedAt @db.Timestamptz(6)
  role_permissions RolePermissions[]

  @@map("permission")
}

model Qualification {
  id              Int       @id @default(autoincrement())
  type            String    @db.VarChar(50)
  name            String    @db.VarChar(100)
  institution     String    @db.VarChar(100)
  status          String    @db.Char(1)
  country         String?   @db.VarChar(50)
  obtainment_date DateTime  @db.Date
  doctor_id       Int
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  doctor          Doctor    @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("qualification")
}

model Role {
  id               Int               @id @default(autoincrement())
  role_name        String            @unique @db.VarChar(50)
  description      String            @db.VarChar(100)
  is_protected     Boolean
  status           String            @db.Char(1)
  created_at       DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?         @default(now()) @updatedAt @db.Timestamptz(6)
  role_permissions RolePermissions[]
  user             User[]

  @@map("role")
}

model RolePermissions {
  id            Int        @id @default(autoincrement())
  rol_id        Int
  permission_id Int
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  role          Role       @relation(fields: [rol_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("role_permissions")
}

model Staff {
  id                Int           @id @default(autoincrement())
  contratation_date DateTime      @db.Date
  separation_date   DateTime?     @db.Date
  status            String        @db.Char(1)
  user_id           Int           @unique
  created_at        DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?     @default(now()) @updatedAt @db.Timestamptz(6)
  audit_events      AuditEvents[]
  doctor            Doctor?
  invoice           Invoice[]
  payroll           Payroll?
  user              User          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("staff")
}

model Treatment {
  id                        Int       @id @default(autoincrement())
  treatment_type            String    @db.VarChar(50)
  title                     String    @db.VarChar(100)
  description               String    @db.VarChar(200)
  estimated_appointments    Int
  days_between_appointments Int
  cost_estimation           Int
  status                    String    @db.Char(1)
  created_at                DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                DateTime? @default(now()) @updatedAt @db.Timestamptz(6)

  @@map("treatment")
}

model User {
  id                  Int       @id @default(autoincrement())
  identification      String    @unique @db.VarChar(50)
  first_name          String    @db.VarChar(50)
  last_name           String    @db.VarChar(50)
  birth_date          DateTime  @db.Date
  phone               String    @db.VarChar(50)
  mobile              String    @db.VarChar(50)
  email               String    @db.VarChar(50)
  address_line        String    @db.VarChar(100)
  address_city        String    @db.VarChar(100)
  photo_url           String
  username            String    @db.VarChar(50)
  password            String
  password_expiration DateTime  @db.Timestamptz(6)
  password_attempts   Int       @default(0)
  last_login          DateTime? @db.Timestamptz(6)
  is_super_admin      Boolean
  status              String    @db.Char(1)
  role_id             Int
  created_at          DateTime? @default(now()) @db.Timestamptz(6)
  updated_at          DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  patient             Patient?
  staff               Staff?
  role                Role      @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("user")
}

model Files {
  id               Int          @id @default(autoincrement())
  media            String
  status           String       @db.Char(1)
  imaging_study_id Int
  created_at       DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?    @default(now()) @updatedAt @db.Timestamptz(6)
  imaging_study    ImagingStudy @relation(fields: [imaging_study_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("files")
}

model Invoice {
  id                 Int       @id @default(autoincrement())
  cancelation_reason String?   @db.VarChar(100)
  cancelation_date   DateTime? @db.Timestamptz(6)
  date_issued        DateTime  @db.Timestamptz(6)
  type               String    @db.VarChar(50)
  total              Int
  note               String?   @db.VarChar(100)
  account_id         Int
  staff_id           Int
  status             String    @db.Char(1)
  created_at         DateTime? @default(now()) @db.Timestamptz(6)
  updated_at         DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  account            Account   @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  staff              Staff     @relation(fields: [staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("invoice")
}
